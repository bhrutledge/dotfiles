#!/usr/bin/env python3
"""
Display ZLE key bindings.

https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Zle-Widgets
https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Widgets
"""
import argparse
import re
import subprocess
from collections import defaultdict
from typing import Iterable, NamedTuple, Union


def main() -> None:
    parser = argparse.ArgumentParser(
        description=__doc__.strip(),
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )
    group = parser.add_mutually_exclusive_group()
    group.add_argument(
        "-s",
        "--string",
        action="store_true",
        help="Sort by in-string instead of widget",
    )
    group.add_argument(
        "-g",
        "--group",
        action="store_true",
        help="Group by widget",
    )
    args = parser.parse_args()

    result = subprocess.run(
        ["zsh", "--login", "--interactive", "-c", "bindkey -L"],
        capture_output=True,
        text=True,
    )

    keybindings = parse_bindkey(result.stdout.splitlines())

    # TODO: Use a PyPI package for table output
    # TODO: Indicate non-printing characters (e.g. space)
    if args.group:
        widgets = group_by_widget(keybindings)

        for widget, bindings in sorted(widgets.items()):
            in_strings = (b.in_string for b in bindings)
            print(f"{widget:40}{''.join(f'{s:8}' for s in in_strings)}")
    else:

        def sort_key(binding: Keybinding) -> Union[tuple[int, str], str]:
            return (
                (len(binding.in_string), binding.in_string.upper())
                if args.string
                else binding.widget
            )

        for binding in sorted(keybindings, key=sort_key):
            print(f"{binding.in_string:10}{binding.widget}")


class Keybinding(NamedTuple):
    in_string: str
    widget: str

    # TODO: @property prefix


IGNORE_WIDGETS = {
    "bracketed-paste",
    "digit-argument",
    "neg-argument",
    "self-insert-unmeta",
}


def parse_bindkey(lines: Iterable[str]) -> Iterable[Keybinding]:
    # bindkey "^A" beginning-of-line
    # TODO: Define a global constant
    pattern = r'bindkey "(?P<in_string>.+)" (?P<widget>.+)'

    for line in lines:
        if (match := re.match(pattern, line)) and match["widget"] not in IGNORE_WIDGETS:
            yield Keybinding(match["in_string"], match["widget"])


def group_by_widget(keybindings: Iterable[Keybinding]) -> dict[str, list[Keybinding]]:
    widgets: dict[str, list[Keybinding]] = defaultdict(list)

    for binding in keybindings:
        widgets[binding.widget].append(binding)

    return widgets


if __name__ == "__main__":
    main()
