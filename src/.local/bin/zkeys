#!/usr/bin/env python3
"""
Display ZLE key bindings.

https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Zle-Widgets
https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Widgets
"""
import argparse
import re
import subprocess
from collections import defaultdict
from typing import Iterable, NamedTuple, Union


def main() -> None:
    parser = argparse.ArgumentParser(
        description=__doc__.strip(),
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )
    group = parser.add_mutually_exclusive_group()
    group.add_argument(
        "-s",
        "--string",
        action="store_true",
        help="sort by in-string instead of widget",
    )
    group.add_argument(
        "-w",
        "--widget",
        action="store_true",
        help="group by widget",
    )
    group.add_argument(
        "-p",
        "--prefix",
        action="store_true",
        help="group by prefix",
    )
    args = parser.parse_args()

    result = subprocess.run(
        ["zsh", "--login", "--interactive", "-c", "bindkey -L"],
        capture_output=True,
        text=True,
    )

    # TODO: Sort by prefix rank and key via Keybinding
    # TODO: Show human-readable keys, e.g. Esc instead of ^[
    # TODO: Use a PyPI package for table output
    # TODO: Indicate non-printing characters (e.g. space)

    bindings = parse_bindkey(result.stdout.splitlines())

    if args.widget:

        widgets = group_bindings(bindings)

        for widget, bindings in sorted(widgets.items()):
            strings = (b.string for b in bindings)
            print(f"{widget:40}{''.join(f'{s:8}' for s in strings)}")

    elif args.prefix:

        prefixes = group_bindings(bindings, key="prefix")

        for prefix, bindings in sorted(prefixes.items()):
            keys = sorted((b.key for b in bindings), key=lambda k: k.upper())
            print(f"{prefix:8}{' '.join(keys)}")

    else:

        def sort_key(binding: Keybinding) -> Union[tuple[str, str], str]:
            return (
                (binding.prefix.upper(), binding.key.upper())
                if args.string
                else binding.widget
            )

        for binding in sorted(bindings, key=sort_key):
            print(f"{binding.string:10}{binding.widget}")


class Keybinding(NamedTuple):
    string: str
    widget: str

    @property
    def prefix(self) -> str:
        return self.string[:-1]

    @property
    def key(self) -> str:
        return self.string[-1]


IGNORE_WIDGETS = {
    "bracketed-paste",
    "digit-argument",
    "neg-argument",
    "self-insert-unmeta",
}


def parse_bindkey(lines: Iterable[str]) -> Iterable[Keybinding]:
    # bindkey "^A" beginning-of-line
    pattern = r'bindkey "(?P<string>.+)" (?P<widget>.+)'

    for line in lines:
        if (match := re.match(pattern, line)) and match["widget"] not in IGNORE_WIDGETS:
            yield Keybinding(match["string"], match["widget"])


def group_bindings(
    bindings: Iterable[Keybinding],
    *,
    key: str = "widget",
) -> dict[str, list[Keybinding]]:

    group: dict[str, list[Keybinding]] = defaultdict(list)
    for binding in bindings:
        group[getattr(binding, key)].append(binding)

    return group


if __name__ == "__main__":
    main()
